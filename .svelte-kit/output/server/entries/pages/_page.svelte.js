import { c as create_ssr_component, e as each, b as add_attribute, v as validate_component } from "../../chunks/ssr.js";
import "firebase/auth";
import "firebase/firestore";
import { a as SignedOut, S as SignedIn } from "../../chunks/SignedOut.js";
import "firebase/storage";
import "firebase/analytics";
import "firebase/database";
import { e as escape } from "../../chunks/escape.js";
const css$1 = {
  code: "div.svelte-2sqb16{width:100%;height:90%;padding:0;margin:0}.overlay.svelte-2sqb16{pointer-events:none;position:absolute;height:90%;width:100%;z-index:12}#userFiles.svelte-2sqb16{pointer-events:all;display:grid;grid-template-columns:auto auto;float:left;width:auto;height:100%;background-color:#343434}#tag_config.svelte-2sqb16{pointer-events:all;display:grid;grid-template-columns:auto auto;float:right;width:auto;height:100%;background-color:#343434}.btn.svelte-2sqb16{font-size:20px;background-color:#212122;color:whitesmoke;border:none;padding-top:0.5rem}#tag_modify.svelte-2sqb16{display:none}",
  map: `{"version":3,"file":"ThreeScence.svelte","sources":["ThreeScence.svelte"],"sourcesContent":["\\r\\n<script>\\r\\n  import { onMount } from \\"svelte\\";\\r\\n  import * as THREE from \\"three\\";\\r\\n  import { OBJLoader} from 'three/examples/jsm/loaders/OBJLoader.js';\\r\\n  import { OrbitControls} from 'three/addons/controls/OrbitControls.js';\\r\\n  import { CSS2DRenderer, CSS2DObject } from 'three/addons/renderers/CSS2DRenderer.js';\\r\\n  import { getAuth, onAuthStateChanged } from \\"firebase/auth\\";\\r\\n  import { PUBLIC_BACKEND_WEBSITE_URL } from \\"$env/static/public\\";\\r\\n\\r\\n  let user_id;\\r\\n\\r\\n  let object;\\r\\n  let prev_object;\\r\\n  let prev_mesh = [];\\r\\n  let new_material;\\r\\n  async function func(event)\\r\\n  {\\r\\n        event.preventDefault();\\r\\n        const requestOptions = {\\r\\n                method: \\"GET\\",\\r\\n                redirect: \\"follow\\"\\r\\n        };\\r\\n        try{\\r\\n            const response = await fetch(PUBLIC_BACKEND_WEBSITE_URL + \\"/models\\", requestOptions);\\r\\n            const result = await response.text();\\r\\n            //console.log(result);\\r\\n            object = JSON.parse(result);\\r\\n            //console.log(object);\\r\\n        }\\r\\n        catch (error){\\r\\n            console.error(error)\\r\\n        }    \\r\\n    }\\r\\n  async function get_url(project_id)\\r\\n  {\\r\\n    const requestOptions = {\\r\\n      method: \\"GET\\",\\r\\n      redirect: \\"follow\\"\\r\\n    };\\r\\n    try{\\r\\n      const response = await fetch(PUBLIC_BACKEND_WEBSITE_URL + \\"/url/\\" + project_id, requestOptions );\\r\\n      const result = await response.text();\\r\\n      return JSON.parse(result)[0][\\"url\\"];\\r\\n    }\\r\\n    catch(error){\\r\\n      console.error(\\"Error from presigned_url: \\" + error)\\r\\n    }\\r\\n    \\r\\n\\r\\n  }\\r\\n  let container;\\r\\n  let objLoader1;\\r\\n  let glbLoader;\\r\\n  let labelRenderer;\\r\\n  let scene;\\r\\n  let camera;\\r\\n  onMount(() => {\\r\\n    // Scene\\r\\n    scene = new THREE.Scene();\\r\\n    scene.background = null;\\r\\n\\r\\n    document.getElementById(\\"selectColor\\").addEventListener(\\"input\\", function(event){\\r\\n      console.log(\\"Color change: \\", event.target.value);\\r\\n      scene.background = new THREE.Color(event.target.value);\\r\\n    });\\r\\n\\r\\n    // Camera\\r\\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\\r\\n    camera.position.z = 5;\\r\\n    camera.layers.enableAll();\\r\\n  \\r\\n    // Renderer\\r\\n    const renderer = new THREE.WebGLRenderer();//({alpha: true});\\r\\n    renderer.setSize(window.innerWidth, window.innerHeight*0.9);\\r\\n    container.appendChild(renderer.domElement);\\r\\n\\r\\n    //orbital controls\\r\\n    const controls = new OrbitControls(camera, renderer.domElement);\\r\\n    camera.position.set(0,20,100);\\r\\n    controls.update();\\r\\n\\r\\n    // AmbientLight \\r\\n    const color = 0xFFFFFF;\\r\\n    const intensity = 0.25;\\r\\n    const ambient_light = new THREE.AmbientLight(color, intensity);\\r\\n    scene.add(ambient_light);  \\r\\n      \\r\\n    // top Light \\r\\n    const top_light = new THREE.DirectionalLight(0xffffff, 1); \\r\\n    top_light.position.set(0, 1, 1).normalize(); \\r\\n    scene.add(top_light); \\r\\n\\r\\n    //attempt to add annotatios take two\\r\\n    const objectDiv = document.createElement('div');\\r\\n    objectDiv.className = 'label';\\r\\n    objectDiv.textContent = \\"Earth\\";\\r\\n    objectDiv.style.backgroundColor = 'transparent';\\r\\n      \\r\\n    const objectLabel = new CSS2DObject(objectDiv);\\r\\n    objectLabel.position.set(1.5 * 7,0 ,0 );\\r\\n    objectLabel.center.set(0, 1);\\r\\n    objectLabel.layers.set(0);\\r\\n      \\r\\n    labelRenderer = new CSS2DRenderer();\\r\\n    labelRenderer.setSize(window.innerWidth, window.innerHeight*0.9);\\r\\n    labelRenderer.domElement.style.position = 'absolute';\\r\\n    labelRenderer.domElement.style.pointerEvents = 'none';\\r\\n    labelRenderer.domElement.style.top = '0px';\\r\\n    document.body.appendChild( labelRenderer.domElement);\\r\\n\\r\\n    objLoader1 = new OBJLoader();\\r\\n\\r\\n    document.getElementById('fileInput').addEventListener('change', function(event) {\\r\\n        const file = event.target.files[0];\\r\\n        if(file){\\r\\n          const reader = new FileReader();\\r\\n          reader.onload = function (e){\\r\\n            const contents = e.target.result;\\r\\n            const objFile = new Blob([contents], {type:\\"application/octet-stream\\"});\\r\\n            const url = URL.createObjectURL(objFile);\\r\\n            //localStorage.setItem('objModelUrl', url);\\r\\n            //console.log(\\"trying to save value of model to local storage\\", url);\\r\\n            loadModel(url);\\r\\n            };\\r\\n          reader.readAsArrayBuffer(file);\\r\\n        }\\r\\n      });\\r\\n\\r\\n      const helperSecene = new THREE.Scene();\\r\\n      const helperCamera = new THREE.OrthographicCamera(-1,1,1,-1,0,10);\\r\\n\\r\\n      const axesHelper = new THREE.AxesHelper(1);\\r\\n      helperSecene.add(axesHelper);\\r\\n      axesHelper.position.set( 0 , 0 ,0);\\r\\n      helperCamera.position.set(0,0,5);\\r\\n      helperCamera.lookAt(axesHelper.position);\\r\\n    // Animation loop \\r\\n    const animate = function () { \\r\\n        requestAnimationFrame(animate); \\r\\n        controls.update();\\r\\n        renderer.clear();\\r\\n        renderer.render(scene, camera); \\r\\n        labelRenderer.render(scene, camera);\\r\\n        \\r\\n        //renderer.clearDepth();\\r\\n        //renderer.render(helperSecene, helperCamera);\\r\\n      }; \\r\\n\\r\\n      animate(); \\r\\n      // Handle window resize \\r\\n      window.addEventListener('resize', () => { \\r\\n        camera.aspect = window.innerWidth / window.innerHeight; \\r\\n        camera.updateProjectionMatrix(); \\r\\n        renderer.setSize(window.innerWidth, window.innerHeight*0.9); \\r\\n        labelRenderer.setSize(window.innerWidth, window.innerHeight*0.9);\\r\\n        helperCamera.left = -1 * window.innerWidth/ window.innerHeight;\\r\\n      });\\r\\n  \\r\\n        //console.log(\\"Page was reloaded\\");\\r\\n        const savedUrl = localStorage.getItem('objModelUrl');\\r\\n        //console.log(savedUrl);\\r\\n        if (savedUrl) {\\r\\n          //console.log(\\"Trying to load the file that was saved locally\\");\\r\\n          loadModel(savedUrl);\\r\\n        } else {\\r\\n         // console.log(\\"No saved file found in localStorage\\");\\r\\n        }\\r\\n    });  \\r\\n\\r\\n    let user_btn_press = 0;\\r\\n    let user_content;\\r\\n    function user_visible()\\r\\n    {\\r\\n      user_content = document.getElementById('user_files');\\r\\n      if(user_btn_press % 2 == 0)\\r\\n      {\\r\\n        user_content.style.display = \\"none\\";\\r\\n      }\\r\\n      else{\\r\\n        user_content.style.display = \\"inline\\";\\r\\n      }\\r\\n      user_btn_press ++;\\r\\n    };\\r\\n\\r\\n    let tag_btn_press = 1;\\r\\n    let tag_content;\\r\\n    function tag_visible()\\r\\n    {\\r\\n      tag_content = document.getElementById('tag_modify');\\r\\n      if(tag_btn_press % 2 == 0)\\r\\n      {\\r\\n        tag_content.style.display = \\"none\\";\\r\\n      }\\r\\n      else{\\r\\n        tag_content.style.display = \\"block\\";\\r\\n      }\\r\\n      tag_btn_press ++;\\r\\n    };\\r\\n    function loadModel(url){\\r\\n      objLoader1.load(url, object =>{\\r\\n        scene.add(object); \\r\\n        removeObject();\\r\\n        new_material = new THREE.MeshNormalMaterial({wireframe: true});\\r\\n        object.traverse((child) =>{\\r\\n          if(child.isMesh ) prev_mesh.push(child.material);\\r\\n        });\\r\\n        prev_object = object;\\r\\n        //object.add(objectLabel);\\r\\n\\r\\n        const boundingBox = new THREE.Box3().setFromObject(object);\\r\\n        const center = boundingBox.getCenter(new THREE.Vector3());\\r\\n        const size = boundingBox.getSize(new THREE.Vector3());\\r\\n\\r\\n        const cameraDistance = Math.max(size.x, size.y, size.z) * 0.75;\\r\\n\\r\\n        camera.position.set(center.x, center.y, center.z + cameraDistance);\\r\\n        camera.lookAt(center);\\r\\n\\r\\n        URL.revokeObjectURL(url);\\r\\n      });\\r\\n    }\\r\\n    function add_annotation()\\r\\n    {\\r\\n      let annoation_text = document.getElementById('annotation');\\r\\n      let text = annoation_text.value;\\r\\n      //attempt to add annotatios take two\\r\\n      const objectDiv = document.createElement('div');\\r\\n      objectDiv.className = 'label';\\r\\n      objectDiv.textContent = text;\\r\\n      objectDiv.style.backgroundColor = 'transparent';\\r\\n\\r\\n      //set position of text\\r\\n      const label_1 = new CSS2DObject(objectDiv);\\r\\n      label_1.position.set(1.5 * 7,0 ,0 );\\r\\n      label_1.center.set(0, 1);\\r\\n      label_1.layers.set(0);\\r\\n      \\r\\n      prev_object.add(label_1);\\r\\n    }\\r\\n\\r\\n    function updateAxesHelperPosition()\\r\\n    {\\r\\n      // Position and size for the helper\\r\\n    // This places it in the bottom-left corner with appropriate sizing\\r\\n    const size = Math.min(window.innerWidth, window.innerHeight) * 0.15; // 15% of the smallest dimension\\r\\n    \\r\\n    renderer.helperCamera.left = -size / 2;\\r\\n    renderer.helperCamera.right = size / 2;\\r\\n    renderer.helperCamera.top = size / 2;\\r\\n    renderer.helperCamera.bottom = -size / 2;\\r\\n    renderer.helperCamera.updateProjectionMatrix();\\r\\n    \\r\\n    // Match the cube's rotation if desired\\r\\n    // Comment this out if you want fixed world axes instead\\r\\n    axesHelper.rotation.copy(prev_object.rotation);\\r\\n    }\\r\\n\\r\\n    onMount(() => {\\r\\n    const auth = getAuth();\\r\\n    onAuthStateChanged(auth, (user) => {\\r\\n      if (user) {\\r\\n        user_id = user.uid || 'Guest';\\r\\n        load_files();\\r\\n        // Place additional dependent code here\\r\\n      } else {\\r\\n        console.log('No user signed in.');\\r\\n      }\\r\\n    });\\r\\n    \\r\\n  });\\r\\n  async function load_url(project_id)\\r\\n  {\\r\\n    const presigned_url = await get_url(project_id);\\r\\n    loadModel(presigned_url);\\r\\n    //save to local storage\\r\\n    localStorage.setItem('objModelUrl', presigned_url);\\r\\n    console.log(\\"trying to save value of model to local storage\\", presigned_url);\\r\\n  }\\r\\n  //trying to remove object from the scene\\r\\n  function removeObject()\\r\\n    {\\r\\n      if(prev_object) \\r\\n      {\\r\\n        scene.remove(prev_object);\\r\\n      }\\r\\n      prev_object= null;\\r\\n      prev_mesh = [];\\r\\n      let mesh_to_wireframe = document.getElementById(\\"reverse_mesh\\");\\r\\n      mesh_to_wireframe.checked = false;\\r\\n    }\\r\\n\\r\\n  let button_names= [];\\r\\n  async function load_files()\\r\\n  {\\r\\n    const requestOptions = {\\r\\n                method: \\"GET\\",\\r\\n                redirect: \\"follow\\"\\r\\n        };\\r\\n        try{\\r\\n            const response = await fetch(PUBLIC_BACKEND_WEBSITE_URL + \\"/model/names/\\"+ user_id, requestOptions);\\r\\n            const result = await response.text();\\r\\n            button_names = JSON.parse(result);\\r\\n        }\\r\\n        catch (error){\\r\\n            console.error(error)\\r\\n        }\\r\\n  }\\r\\n\\r\\n  //function to return the original mesh to the object\\r\\n  function original_mesh()\\r\\n  {\\r\\n    let i = 0;\\r\\n    prev_object.traverse((child) =>{\\r\\n      if(child.isMesh)child.material = prev_mesh[i++];\\r\\n    });\\r\\n  }\\r\\n  function wire_frame()\\r\\n  {\\r\\n    prev_object.traverse((child) =>{\\r\\n      if(child.isMesh) child.material = new_material;\\r\\n    });\\r\\n  }\\r\\n  function reverse_mesh()\\r\\n  {\\r\\n    let mesh_to_wireframe = document.getElementById(\\"reverse_mesh\\");\\r\\n    if(mesh_to_wireframe.checked == true) wire_frame();\\r\\n    else original_mesh();\\r\\n  }\\r\\n  //let text_area = document.getElementById(\\"annotation\\");\\r\\n  //text_area.addEventListener(\\"input\\", add_annotation);\\r\\n<\/script>\\r\\n\\r\\n\\r\\n<style>\\r\\n  div\\r\\n  {\\r\\n    width: 100%;\\r\\n    height: 90%;\\r\\n    padding: 0;\\r\\n    margin: 0;\\r\\n  }\\r\\n  .label{\\r\\n    z-index: 10;\\r\\n  }\\r\\n\\r\\n  .overlay{\\r\\n    pointer-events: none;\\r\\n    position: absolute;\\r\\n    height: 90%;\\r\\n    width: 100%;\\r\\n    z-index: 12;\\r\\n  }\\r\\n  #userFiles{\\r\\n    pointer-events:all;\\r\\n    display: grid;\\r\\n    grid-template-columns: auto auto;\\r\\n    float: left;\\r\\n    width: auto;\\r\\n    height: 100%;\\r\\n    background-color: #343434;\\r\\n  }\\r\\n  #tag_config{\\r\\n    pointer-events:all;\\r\\n    display: grid;\\r\\n    grid-template-columns: auto auto;\\r\\n    float: right;\\r\\n    width: auto;\\r\\n    height: 100%;\\r\\n    background-color: #343434; \\r\\n  }\\r\\n  .btn{\\r\\n    font-size: 20px;\\r\\n    background-color: #212122;\\r\\n    color: whitesmoke;\\r\\n    border: none;\\r\\n    padding-top: 0.5rem;\\r\\n  }\\r\\n  #tag_modify\\r\\n  {\\r\\n    display: none;\\r\\n  }\\r\\n  .btn_model:hover\\r\\n  {\\r\\n    background-color: lightskyblue;\\r\\n  }\\r\\n  .btn_model\\r\\n  {\\r\\n    background-color: #212122;\\r\\n    border: none;\\r\\n    width: 15em;\\r\\n    font-size: 1em;\\r\\n  }  \\r\\n</style>\\r\\n<div class=\\"overlay\\">\\r\\n  <div id=\\"userFiles\\">\\r\\n    <div id = \\"user_files\\">\\r\\n      <table id = \\"user_files_table\\">\\r\\n        <caption>Models:</caption>\\r\\n        {#if button_names.length === 0}\\r\\n        <p>Loading...</p>\\r\\n        {:else}\\r\\n          {#each button_names as button}\\r\\n          <tr>\\r\\n            <button\\r\\n              style=\\"width: 150px; border: none; font-size: 1em;\\"\\r\\n              on:click={() => load_url(button.project_id)}>\\r\\n              {button.model_name}\\r\\n            </button> \\r\\n          </tr>\\r\\n          {/each}\\r\\n        {/if}\\r\\n      </table>\\r\\n    </div>\\r\\n    <button on:click={user_visible} class=\\"btn\\" id=\\"user_btn\\">\\r\\n      <i class=\\"fa fa-folder\\"></i>\\r\\n    </button>\\r\\n  </div>\\r\\n  <div id=\\"tag_config\\">\\r\\n    <button on:click={tag_visible} class=\\"btn\\" id=\\"folder_btn\\">\\r\\n      <i class=\\"fa fa-bars\\"></i>\\r\\n    </button>\\r\\n    <div id = \\"tag_modify\\">\\r\\n      <p>Input annotation here</p>\\r\\n      <textarea id=\\"annotation\\" name= \\"input_value\\" rows=\\"5\\" cols=\\"50\\"\\r\\n      placeholder=\\"Enter annotation here ...\\" on:input={add_annotation}></textarea>\\r\\n      <div style=\\"width:fit-content; height:fit-content\\">\\r\\n        <label for=\\"reverse_mesh\\">View wireframe: </label>\\r\\n        <input type='checkbox'id=\\"reverse_mesh\\" on:click={reverse_mesh}> \\r\\n      </div>\\r\\n      <div style=\\"height:fit-content; padding: 20px 0px;\\">\\r\\n        <label for=\\"annotation_color\\">Font color:\\r\\n          <input type=\\"text\\" id=\\"annotation_color\\">\\r\\n        </label>\\r\\n      </div>\\r\\n      <div style=\\"height:fit-content; padding: 20px 0px;\\">\\r\\n        <label for=\\"annotation_size\\">Font size:\\r\\n          <input type=\\"text\\" id=\\"annotation_size\\">\\r\\n        </label> \\r\\n      </div>\\r\\n        \\r\\n      \\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div bind:this={container}></div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n"],"names":[],"mappings":"AA+UE,iBACA,CACE,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CACV,CAKA,sBAAQ,CACN,cAAc,CAAE,IAAI,CACpB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,EACX,CACA,wBAAU,CACR,eAAe,GAAG,CAClB,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,IAAI,CAChC,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OACpB,CACA,yBAAW,CACT,eAAe,GAAG,CAClB,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,IAAI,CAChC,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OACpB,CACA,kBAAI,CACF,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,UAAU,CACjB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,MACf,CACA,yBACA,CACE,OAAO,CAAE,IACX"}`
};
const ThreeScence = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let button_names = [];
  $$result.css.add(css$1);
  return `<div class="overlay svelte-2sqb16"><div id="userFiles" class="svelte-2sqb16"><div id="user_files" class="svelte-2sqb16"><table id="user_files_table"><caption data-svelte-h="svelte-111ylxs">Models:</caption> ${button_names.length === 0 ? `<p data-svelte-h="svelte-qdsr2u">Loading...</p>` : `${each(button_names, (button) => {
    return `<tr><button style="width: 150px; border: none; font-size: 1em;">${escape(button.model_name)}</button> </tr>`;
  })}`}</table></div> <button class="btn svelte-2sqb16" id="user_btn" data-svelte-h="svelte-11gz36o"><i class="fa fa-folder"></i></button></div> <div id="tag_config" class="svelte-2sqb16"><button class="btn svelte-2sqb16" id="folder_btn" data-svelte-h="svelte-1o7lkgo"><i class="fa fa-bars"></i></button> <div id="tag_modify" class="svelte-2sqb16"><p data-svelte-h="svelte-16mmvbt">Input annotation here</p> <textarea id="annotation" name="input_value" rows="5" cols="50" placeholder="Enter annotation here ..."></textarea> <div style="width:fit-content; height:fit-content" class="svelte-2sqb16"><label for="reverse_mesh" data-svelte-h="svelte-1qywstl">View wireframe:</label> <input type="checkbox" id="reverse_mesh"></div> <div style="height:fit-content; padding: 20px 0px;" class="svelte-2sqb16" data-svelte-h="svelte-jk0e2q"><label for="annotation_color">Font color:
          <input type="text" id="annotation_color"></label></div> <div style="height:fit-content; padding: 20px 0px;" class="svelte-2sqb16" data-svelte-h="svelte-1sr1sw4"><label for="annotation_size">Font size:
          <input type="text" id="annotation_size"></label></div></div></div></div> <div class="svelte-2sqb16"${add_attribute()}></div>`;
});
const css = {
  code: '#content.svelte-1vapq8t{display:grid;place-items:center;font-family:"Tan peral"}h1.svelte-1vapq8t{font-family:inherit;font-size:40px}p.svelte-1vapq8t{font-family:inherit;font-size:20px}',
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\r\\n  import { SignedIn, SignedOut } from \\"sveltefire\\";\\r\\n  import ThreeScence from '$lib/ThreeScence.svelte'\\r\\n<\/script>\\r\\n\\r\\n<SignedOut>\\r\\n  <div id=\\"content\\">\\r\\n    <h1>Welcome to 3d-scribe</h1>\\r\\n    <p><br>You need to sign in to load models and modify them, you may explore the community models.</p>\\r\\n  </div>\\r\\n</SignedOut>\\r\\n\\r\\n<SignedIn>\\r\\n  <ThreeScence/>\\r\\n</SignedIn>\\r\\n\\r\\n<style>\\r\\n  #content\\r\\n  {\\r\\n    display: grid;\\r\\n    place-items: center;\\r\\n    font-family: \\"Tan peral\\";\\r\\n  }\\r\\n  h1{\\r\\n    font-family: inherit;\\r\\n    font-size: 40px;\\r\\n  }\\r\\n  p{\\r\\n    font-family: inherit;\\r\\n    font-size: 20px;\\r\\n  }\\r\\n\\r\\n</style>"],"names":[],"mappings":"AAiBE,uBACA,CACE,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,WAAW,CAAE,WACf,CACA,iBAAE,CACA,WAAW,CAAE,OAAO,CACpB,SAAS,CAAE,IACb,CACA,gBAAC,CACC,WAAW,CAAE,OAAO,CACpB,SAAS,CAAE,IACb"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${validate_component(SignedOut, "SignedOut").$$render($$result, {}, {}, {
    default: () => {
      return `<div id="content" class="svelte-1vapq8t" data-svelte-h="svelte-dz1pvz"><h1 class="svelte-1vapq8t">Welcome to 3d-scribe</h1> <p class="svelte-1vapq8t"><br>You need to sign in to load models and modify them, you may explore the community models.</p></div>`;
    }
  })} ${validate_component(SignedIn, "SignedIn").$$render($$result, {}, {}, {
    default: () => {
      return `${validate_component(ThreeScence, "ThreeScence").$$render($$result, {}, {}, {})}`;
    }
  })}`;
});
export {
  Page as default
};
